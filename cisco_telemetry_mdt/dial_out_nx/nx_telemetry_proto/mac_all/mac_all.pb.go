// ----------------------------------------------------------------------------
// mac_all.proto - Mac-all protobuf definitions
//
// August 2019
//
// Copyright (c) 2019 by Cisco Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.7.1
// source: mac_all.proto

package mac_all

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// MAC event types
type MacAllEventType int32

const (
	MacAllEventType_MAC_ALL_EVENT_TYPE_NO_EVENT      MacAllEventType = 0
	MacAllEventType_MAC_ALL_EVENT_TYPE_ADD           MacAllEventType = 1
	MacAllEventType_MAC_ALL_EVENT_TYPE_DELETE        MacAllEventType = 2
	MacAllEventType_MAC_ALL_EVENT_TYPE_UPDATE        MacAllEventType = 3
	MacAllEventType_MAC_ALL_EVENT_TYPE_DOWNLOAD      MacAllEventType = 4
	MacAllEventType_MAC_ALL_EVENT_TYPE_DOWNLOAD_DONE MacAllEventType = 5
)

// Enum value maps for MacAllEventType.
var (
	MacAllEventType_name = map[int32]string{
		0: "MAC_ALL_EVENT_TYPE_NO_EVENT",
		1: "MAC_ALL_EVENT_TYPE_ADD",
		2: "MAC_ALL_EVENT_TYPE_DELETE",
		3: "MAC_ALL_EVENT_TYPE_UPDATE",
		4: "MAC_ALL_EVENT_TYPE_DOWNLOAD",
		5: "MAC_ALL_EVENT_TYPE_DOWNLOAD_DONE",
	}
	MacAllEventType_value = map[string]int32{
		"MAC_ALL_EVENT_TYPE_NO_EVENT":      0,
		"MAC_ALL_EVENT_TYPE_ADD":           1,
		"MAC_ALL_EVENT_TYPE_DELETE":        2,
		"MAC_ALL_EVENT_TYPE_UPDATE":        3,
		"MAC_ALL_EVENT_TYPE_DOWNLOAD":      4,
		"MAC_ALL_EVENT_TYPE_DOWNLOAD_DONE": 5,
	}
)

func (x MacAllEventType) Enum() *MacAllEventType {
	p := new(MacAllEventType)
	*p = x
	return p
}

func (x MacAllEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacAllEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_mac_all_proto_enumTypes[0].Descriptor()
}

func (MacAllEventType) Type() protoreflect.EnumType {
	return &file_mac_all_proto_enumTypes[0]
}

func (x MacAllEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacAllEventType.Descriptor instead.
func (MacAllEventType) EnumDescriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{0}
}

// MAC address types
type Type int32

const (
	Type_MAC_ALL_ADDRESS_TYPE_NO_TYPE Type = 0
	Type_MAC_ALL_ADDRESS_TYPE_STATIC  Type = 1
	Type_MAC_ALL_ADDRESS_TYPE_DYNAMIC Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "MAC_ALL_ADDRESS_TYPE_NO_TYPE",
		1: "MAC_ALL_ADDRESS_TYPE_STATIC",
		2: "MAC_ALL_ADDRESS_TYPE_DYNAMIC",
	}
	Type_value = map[string]int32{
		"MAC_ALL_ADDRESS_TYPE_NO_TYPE": 0,
		"MAC_ALL_ADDRESS_TYPE_STATIC":  1,
		"MAC_ALL_ADDRESS_TYPE_DYNAMIC": 2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mac_all_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_mac_all_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{1}
}

type MacL2Type int32

const (
	MacL2Type_MAC_ALL_MAC_L2_TYPE_UNKNOWN          MacL2Type = 0
	MacL2Type_MAC_ALL_MAC_L2_TYPE_PRIMARY          MacL2Type = 1
	MacL2Type_MAC_ALL_MAC_L2_TYPE_GATEWAY          MacL2Type = 2
	MacL2Type_MAC_ALL_MAC_L2_TYPE_OVERLAY          MacL2Type = 4
	MacL2Type_MAC_ALL_MAC_L2_TYPE_PRIMARY_VPC_PEER MacL2Type = 5
	MacL2Type_MAC_ALL_MAC_L2_TYPE_CONTROL_PLANE    MacL2Type = 6
	MacL2Type_MAC_ALL_MAC_L2_TYPE_VSAN             MacL2Type = 7
)

// Enum value maps for MacL2Type.
var (
	MacL2Type_name = map[int32]string{
		0: "MAC_ALL_MAC_L2_TYPE_UNKNOWN",
		1: "MAC_ALL_MAC_L2_TYPE_PRIMARY",
		2: "MAC_ALL_MAC_L2_TYPE_GATEWAY",
		4: "MAC_ALL_MAC_L2_TYPE_OVERLAY",
		5: "MAC_ALL_MAC_L2_TYPE_PRIMARY_VPC_PEER",
		6: "MAC_ALL_MAC_L2_TYPE_CONTROL_PLANE",
		7: "MAC_ALL_MAC_L2_TYPE_VSAN",
	}
	MacL2Type_value = map[string]int32{
		"MAC_ALL_MAC_L2_TYPE_UNKNOWN":          0,
		"MAC_ALL_MAC_L2_TYPE_PRIMARY":          1,
		"MAC_ALL_MAC_L2_TYPE_GATEWAY":          2,
		"MAC_ALL_MAC_L2_TYPE_OVERLAY":          4,
		"MAC_ALL_MAC_L2_TYPE_PRIMARY_VPC_PEER": 5,
		"MAC_ALL_MAC_L2_TYPE_CONTROL_PLANE":    6,
		"MAC_ALL_MAC_L2_TYPE_VSAN":             7,
	}
)

func (x MacL2Type) Enum() *MacL2Type {
	p := new(MacL2Type)
	*p = x
	return p
}

func (x MacL2Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacL2Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mac_all_proto_enumTypes[2].Descriptor()
}

func (MacL2Type) Type() protoreflect.EnumType {
	return &file_mac_all_proto_enumTypes[2]
}

func (x MacL2Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacL2Type.Descriptor instead.
func (MacL2Type) EnumDescriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{2}
}

type MacInfo int32

const (
	MacInfo_MAC_ALL_INFO_STANDARD         MacInfo = 0
	MacInfo_MAC_ALL_INFO_DROP             MacInfo = 1
	MacInfo_MAC_ALL_INFO_SVI_DOWN_FLOOD   MacInfo = 2
	MacInfo_MAC_ALL_INFO_SUP_INBAND_CFSOE MacInfo = 3
	MacInfo_MAC_ALL_INFO_VPC_PEER_LINK    MacInfo = 4
	MacInfo_MAC_ALL_INFO_NVE              MacInfo = 5
	MacInfo_MAC_ALL_INFO_SUP_ETH          MacInfo = 6
)

// Enum value maps for MacInfo.
var (
	MacInfo_name = map[int32]string{
		0: "MAC_ALL_INFO_STANDARD",
		1: "MAC_ALL_INFO_DROP",
		2: "MAC_ALL_INFO_SVI_DOWN_FLOOD",
		3: "MAC_ALL_INFO_SUP_INBAND_CFSOE",
		4: "MAC_ALL_INFO_VPC_PEER_LINK",
		5: "MAC_ALL_INFO_NVE",
		6: "MAC_ALL_INFO_SUP_ETH",
	}
	MacInfo_value = map[string]int32{
		"MAC_ALL_INFO_STANDARD":         0,
		"MAC_ALL_INFO_DROP":             1,
		"MAC_ALL_INFO_SVI_DOWN_FLOOD":   2,
		"MAC_ALL_INFO_SUP_INBAND_CFSOE": 3,
		"MAC_ALL_INFO_VPC_PEER_LINK":    4,
		"MAC_ALL_INFO_NVE":              5,
		"MAC_ALL_INFO_SUP_ETH":          6,
	}
)

func (x MacInfo) Enum() *MacInfo {
	p := new(MacInfo)
	*p = x
	return p
}

func (x MacInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_mac_all_proto_enumTypes[3].Descriptor()
}

func (MacInfo) Type() protoreflect.EnumType {
	return &file_mac_all_proto_enumTypes[3]
}

func (x MacInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacInfo.Descriptor instead.
func (MacInfo) EnumDescriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{3}
}

// MAC message
type Mac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Age - seconds since last seen
	Age uint32 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	// Additional Information on the MAC
	MacInfo MacInfo `protobuf:"varint,2,opt,name=mac_info,json=macInfo,proto3,enum=mac_all.MacInfo" json:"mac_info,omitempty"`
	// NTFY
	Ntfy bool `protobuf:"varint,3,opt,name=ntfy,proto3" json:"ntfy,omitempty"`
	// Port -
	//Must match first field in the output of show intf brief.
	//Example: Eth1/1 or Vlan100
	Port string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// Routed or not
	Routed bool `protobuf:"varint,5,opt,name=routed,proto3" json:"routed,omitempty"`
	// Secure or not
	Secure bool `protobuf:"varint,6,opt,name=secure,proto3" json:"secure,omitempty"`
	// Static or Dynamic
	MacType Type `protobuf:"varint,7,opt,name=mac_type,json=macType,proto3,enum=mac_all.Type" json:"mac_type,omitempty"`
	// MAC L2 Type
	L2Type MacL2Type `protobuf:"varint,8,opt,name=l2_type,json=l2Type,proto3,enum=mac_all.MacL2Type" json:"l2_type,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,9,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// VLAN number
	Vlan uint32 `protobuf:"varint,10,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Event types
	EventType MacAllEventType `protobuf:"varint,11,opt,name=event_type,json=eventType,proto3,enum=mac_all.MacAllEventType" json:"event_type,omitempty"`
}

func (x *Mac) Reset() {
	*x = Mac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mac_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mac) ProtoMessage() {}

func (x *Mac) ProtoReflect() protoreflect.Message {
	mi := &file_mac_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mac.ProtoReflect.Descriptor instead.
func (*Mac) Descriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{0}
}

func (x *Mac) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Mac) GetMacInfo() MacInfo {
	if x != nil {
		return x.MacInfo
	}
	return MacInfo_MAC_ALL_INFO_STANDARD
}

func (x *Mac) GetNtfy() bool {
	if x != nil {
		return x.Ntfy
	}
	return false
}

func (x *Mac) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Mac) GetRouted() bool {
	if x != nil {
		return x.Routed
	}
	return false
}

func (x *Mac) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *Mac) GetMacType() Type {
	if x != nil {
		return x.MacType
	}
	return Type_MAC_ALL_ADDRESS_TYPE_NO_TYPE
}

func (x *Mac) GetL2Type() MacL2Type {
	if x != nil {
		return x.L2Type
	}
	return MacL2Type_MAC_ALL_MAC_L2_TYPE_UNKNOWN
}

func (x *Mac) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Mac) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *Mac) GetEventType() MacAllEventType {
	if x != nil {
		return x.EventType
	}
	return MacAllEventType_MAC_ALL_EVENT_TYPE_NO_EVENT
}

type Macall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MacallList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Macall) Reset() {
	*x = Macall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mac_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Macall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Macall) ProtoMessage() {}

func (x *Macall) ProtoReflect() protoreflect.Message {
	mi := &file_mac_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Macall.ProtoReflect.Descriptor instead.
func (*Macall) Descriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{1}
}

func (x *Macall) GetList() []*MacallList {
	if x != nil {
		return x.List
	}
	return nil
}

type MacallList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Mac    string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Value  *Mac   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MacallList) Reset() {
	*x = MacallList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mac_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacallList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacallList) ProtoMessage() {}

func (x *MacallList) ProtoReflect() protoreflect.Message {
	mi := &file_mac_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacallList.ProtoReflect.Descriptor instead.
func (*MacallList) Descriptor() ([]byte, []int) {
	return file_mac_all_proto_rawDescGZIP(), []int{2}
}

func (x *MacallList) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *MacallList) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MacallList) GetValue() *Mac {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_mac_all_proto protoreflect.FileDescriptor

var file_mac_all_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xe1, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x74, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e,
	0x74, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6c, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x63,
	0x4c, 0x32, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x32, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x06,
	0x4d, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x5b, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xd3, 0x01, 0x0a,
	0x0f, 0x4d, 0x61, 0x63, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x05, 0x2a, 0x6b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x2a,
	0xfe, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x4c, 0x32, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4c, 0x32, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4c, 0x32,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4c,
	0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x4c, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10,
	0x04, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43,
	0x5f, 0x4c, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x56, 0x50, 0x43, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4d,
	0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x53, 0x41, 0x4e, 0x10, 0x07,
	0x2a, 0xcf, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x43, 0x5f, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x56, 0x49, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x46, 0x53, 0x4f, 0x45,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x56, 0x50, 0x43, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x4e, 0x56, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x43, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x55, 0x50, 0x5f, 0x45, 0x54, 0x48,
	0x10, 0x06, 0x42, 0x03, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mac_all_proto_rawDescOnce sync.Once
	file_mac_all_proto_rawDescData = file_mac_all_proto_rawDesc
)

func file_mac_all_proto_rawDescGZIP() []byte {
	file_mac_all_proto_rawDescOnce.Do(func() {
		file_mac_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_mac_all_proto_rawDescData)
	})
	return file_mac_all_proto_rawDescData
}

var file_mac_all_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mac_all_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mac_all_proto_goTypes = []interface{}{
	(MacAllEventType)(0), // 0: mac_all.MacAllEventType
	(Type)(0),            // 1: mac_all.Type
	(MacL2Type)(0),       // 2: mac_all.MacL2Type
	(MacInfo)(0),         // 3: mac_all.MacInfo
	(*Mac)(nil),          // 4: mac_all.Mac
	(*Macall)(nil),       // 5: mac_all.Macall
	(*MacallList)(nil),   // 6: mac_all.MacallList
}
var file_mac_all_proto_depIdxs = []int32{
	3, // 0: mac_all.Mac.mac_info:type_name -> mac_all.MacInfo
	1, // 1: mac_all.Mac.mac_type:type_name -> mac_all.Type
	2, // 2: mac_all.Mac.l2_type:type_name -> mac_all.MacL2Type
	0, // 3: mac_all.Mac.event_type:type_name -> mac_all.MacAllEventType
	6, // 4: mac_all.Macall.list:type_name -> mac_all.MacallList
	4, // 5: mac_all.MacallList.value:type_name -> mac_all.Mac
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_mac_all_proto_init() }
func file_mac_all_proto_init() {
	if File_mac_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mac_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mac_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Macall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mac_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacallList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mac_all_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mac_all_proto_goTypes,
		DependencyIndexes: file_mac_all_proto_depIdxs,
		EnumInfos:         file_mac_all_proto_enumTypes,
		MessageInfos:      file_mac_all_proto_msgTypes,
	}.Build()
	File_mac_all_proto = out.File
	file_mac_all_proto_rawDesc = nil
	file_mac_all_proto_goTypes = nil
	file_mac_all_proto_depIdxs = nil
}
